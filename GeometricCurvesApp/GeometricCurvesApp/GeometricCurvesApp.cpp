#define _USE_MATH_DEFINES

#include"RandomCurvesData.h"

int main()
{
    RandomCurvesData curvesData(MinMaxPositiveInt(1, 10), MinMaxPositiveInt(1, 10), MinMaxPositiveInt(1, 10));

    curvesData.printPointsOfAllCurves(M_PI / 4.0);
    curvesData.printPointDerivativesOfAllCurves(M_PI / 4.0);

    double sumOfRadii = curvesData.calculateSumOfCircleRadii();

    return 0;
}

//Разработайте небольшую программу на C++, которая реализовала бы поддержку иерархии 3D - кривых.
//+   1. Поддержка нескольких типов 3D геометрических кривых – кругов, эллипсов и 3D спиралей. (Упрощенные
//    определения приведены ниже).Каждая кривая должна иметь возможность возвращать 3D - точку и первую производную(3D
//        - вектор) по параметру t вдоль кривой.
//+   2. Заполните контейнер(например, вектор или список) объектами этих типов, созданными случайным образом, со
//    случайными параметрами.
//+   3. Выведите координаты точек и производных всех кривых в контейнере при t = PI / 4.
//+   4. Заполните второй контейнер, который содержал бы только круги из первого контейнера.Убедитесь
//    , что второй контейнер разделяет(т.е.не клонирует) окружности первого, например, с помощью указателей.
//+   5. Отсортируйте второй контейнер в порядке возрастания радиусов окружностей.То есть первый элемент имеет
//    наименьший радиус, последний - наибольший.
//+   6. Вычислите общую сумму радиусов всех кривых во втором контейнере.
//    (*) Дополнительные необязательные требования :
//+         7. Разделите реализацию на библиотеку curves(.dll или.so) и исполняемый файл, который использует API этой
//          библиотеки.
//+         8. Реализуйте вычисление общей суммы радиусов с использованием параллельных вычислений(например, OpenMP или Intel
//          Библиотека TBB).
//Требования к внедрению :
//+ 1. Реализация должна использовать виртуальные методы.
//+ 2. Не имеет ни явного освобождения памяти, ни утечек памяти.
//+ 3. Кривые должны быть физически правильными(например, радиусы должны быть положительными).
//+ 4. Контейнеры и сортировка должны быть реализованы с использованием STL(Стандартная библиотека шаблонов C++).
//  5. Реализация может использовать конструкции C++11 или выше.
//+ 6. Код должен быть скомпилирован с помощью любого компилятора по вашему выбору(gcc, Visual C++ и т.д.).
//Определения кривых :
//+ -Все кривые определены параметрически, т.е.точка вычисляется по некоторой формуле C(t).
//+ - Окружность плоская в плоскости XoY(т.е.все Z - координаты равны 0) и определяется ее радиусом.
//+ - Эллипс является плоским в плоскости XoY и определяется двумя его радиусами вдоль осей X и Y.
//+ - Спираль является пространственной и определяется ее радиусом и шагом(см.рисунок ниже).
//  Чтобы сделать виток в параметрическом пространстве, требуется 2 * PI, т.е.любая точка на спирали удовлетворяет условию C(t + 2 * PI) = C(t) +
//  {0, 0, шаг}.
